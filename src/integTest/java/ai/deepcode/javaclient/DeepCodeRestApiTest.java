/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ai.deepcode.javaclient;

import ai.deepcode.javaclient.requests.*;
import ai.deepcode.javaclient.responses.CreateBundleResponse;
import ai.deepcode.javaclient.responses.EmptyResponse;
import ai.deepcode.javaclient.responses.GetAnalysisResponse;
import ai.deepcode.javaclient.responses.GetFiltersResponse;
import org.jetbrains.annotations.NotNull;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.*;
import java.util.stream.Collectors;

import static org.junit.Assert.*;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class DeepCodeRestApiTest {

    private final String testFileContent =
            "public class AnnotatorTest {\n"
                    + "  public static void delay(long millis) {\n"
                    + "    try {\n"
                    + "      Thread.sleep(millis);\n"
                    + "    } catch (InterruptedException e) {\n"
                    + "      e.printStackTrace();\n"
                    + "    }\n"
                    + "  }\n"
                    + "}\n";

    // !!! Will works only with already logged sessionToken
    private static final String loggedToken = System.getenv("SNYK_TOKEN");
    private static final String baseUrl = System.getenv("DEEPROXY_API_URL");

    @Test
    public void _022_setBaseUrl() {
        System.out.println("\n--------------Set base URL----------------\n");
        try {
            doSetBaseUrlTest("", 401);
            doSetBaseUrlTest("https://www.google.com/", 404);
            doSetBaseUrlTest("https://deeproxy.snyk.io/", 401);
        } finally {
            DeepCodeRestApi.setBaseUrl("");
        }
    }

    private void doSetBaseUrlTest(String baseUrl, int expectedStatusCode) {
        DeepCodeRestApi.setBaseUrl(baseUrl);

        EmptyResponse response = DeepCodeRestApi.checkBundle("blabla", "blabla");

        int status = response.getStatusCode();
        String description = response.getStatusDescription();
        System.out.printf(
                "Check Session call to [%3$s] with token [%1$s] return [%2$d] code: [%4$s]\n",
                "blabla", status, baseUrl, description);

        assertEquals(expectedStatusCode, status);
    }

    @Test
    public void _025_getFilters() {
        System.out.println("\n--------------Get Filters----------------\n");
        GetFiltersResponse response = DeepCodeRestApi.getFilters(loggedToken);
        assertNotNull(response);
        final String errorMsg = "Get Filters return status code: [" + response.getStatusCode() + "] " 
                + response.getStatusDescription() + "\n";
        
        assertEquals(errorMsg, 200, response.getStatusCode());

        System.out.printf(
                "Get Filters call returns next filters: \nextensions: %1$s \nconfigFiles: %2$s\n",
                response.getExtensions(), response.getConfigFiles());
    }

    @Test
    public void _030_createBundle_from_source() {
        CreateBundleResponse response = createBundleFromSource();

        assertNotNull(response);
        System.out.printf("Create Bundle call return:\nStatus code [%1$d] %3$s \nBundleId: [%2$s]\n",
                response.getStatusCode(), response.getBundleHash(), response.getStatusDescription());
        assertEquals(200, response.getStatusCode());
        assertEquals(0, response.getMissingFiles().size());
    }

    @NotNull
    private CreateBundleResponse createBundleFromSource() {
        System.out.println("\n--------------Create Bundle from Source----------------\n");
        DeepCodeRestApi.setBaseUrl(baseUrl);
        FileContent fileContent = new FileContent("/AnnotatorTest.java", testFileContent);
        FileContentRequest files = new FileContentRequest(Collections.singletonList(fileContent));

        CreateBundleResponse response = DeepCodeRestApi.createBundle(loggedToken, files);
        return response;
    }

    @Test
    public void _031_createBundle_wrong_request() {
        System.out.println("\n--------------Create Bundle with wrong requests----------------\n");
        FileContent fileContent = new FileContent("/AnnotatorTest.java", testFileContent);
        FileContentRequest files = new FileContentRequest(Collections.singletonList(fileContent));
        final String brokenToken = "fff";
        
        CreateBundleResponse response = DeepCodeRestApi.createBundle(brokenToken, files);
        
        assertNotNull(response);
        assertEquals("Create Bundle call with malformed token should not be accepted by server", 401,
                response.getStatusCode());
        System.out.printf(
                "Create Bundle call with malformed token [%1$s] is not accepted by server with Status code [%2$d].\n",
                brokenToken, response.getStatusCode());
    }

    @Test
    public void _035_createBundle_with_hash() {
        System.out.println("\n--------------Create Bundle with Hash----------------\n");
        FileHashRequest fileHashRequest = createFileHashRequest();
        CreateBundleResponse response = createBundleFromFileHashRequest(fileHashRequest);
        assertEquals(200, response.getStatusCode());
        assertNotEquals("", response.getBundleHash());
    }

    @NotNull
    private CreateBundleResponse createBundleFromFileHashRequest(FileHashRequest fileHashRequest) {
        CreateBundleResponse response = DeepCodeRestApi.createBundle(loggedToken, fileHashRequest);
        assertNotNull(response);
        System.out.printf(
                "Create Bundle call return:\nStatus code [%1$d] %3$s \n bundleId: %2$s\n missingFiles: %4$s\n",
                response.getStatusCode(),
                response.getBundleHash(),
                response.getStatusDescription(),
                response.getMissingFiles());
        return response;
    }

    @Test
    public void _036_Check_Bundle() {
        System.out.println("\n--------------Check Bundle----------------\n");
        FileHashRequest fileHashRequest = createFileHashRequest();
        CreateBundleResponse createBundleResponse =
                DeepCodeRestApi.createBundle(loggedToken, fileHashRequest);
        assertNotNull(createBundleResponse);
        System.out.printf(
                "\nCreate Bundle call return:\nStatus code [%1$d] %3$s \n bundleId: %2$s\n missingFiles: %4$s\n",
                createBundleResponse.getStatusCode(),
                createBundleResponse.getBundleHash(),
                createBundleResponse.getStatusDescription(),
                createBundleResponse.getMissingFiles());
        assertEquals(200, createBundleResponse.getStatusCode());
        assertFalse("List of missingFiles is empty.", createBundleResponse.getMissingFiles().isEmpty());

        CreateBundleResponse checkBundleResponse =
                DeepCodeRestApi.checkBundle(loggedToken, createBundleResponse.getBundleHash());
        assertNotNull(checkBundleResponse);
        System.out.printf(
                "\nCheck Bundle call return:\nStatus code [%1$d] %3$s \n bundleId: %2$s\n missingFiles: %4$s\n",
                checkBundleResponse.getStatusCode(),
                checkBundleResponse.getBundleHash(),
                checkBundleResponse.getStatusDescription(),
                checkBundleResponse.getMissingFiles());
        assertEquals(200, checkBundleResponse.getStatusCode());
        assertFalse("List of missingFiles is empty.", checkBundleResponse.getMissingFiles().isEmpty());
        assertEquals(
                "Checked and returned bundleId's are different.",
                createBundleResponse.getBundleHash(),
                checkBundleResponse.getBundleHash());

        Map<String, FileHash2ContentRequest> files =
                fileHashRequest.getFiles().entrySet().stream().collect(Collectors.toMap(
                        Map.Entry::getKey,
                        entry -> {
                            String content;
                            try {
                                content = Files.readString(Paths.get(entry.getKey()));
                            } catch (IOException e) {
                                throw new RuntimeException(e);
                            }
                            return new FileHash2ContentRequest(entry.getValue(), content);
                        }
                ));

        EmptyResponse uploadFileResponse =
                DeepCodeRestApi.extendBundle(
                        loggedToken,
                        createBundleResponse.getBundleHash(),
                        new ExtendBundleWithContentRequest(files, Collections.emptyList()));

        assertNotNull(uploadFileResponse);
        System.out.printf(
                "\nUpload Files call for file %3$s \nStatus code [%1$d] %2$s\n",
                uploadFileResponse.getStatusCode(),
                uploadFileResponse.getStatusDescription(),
                createBundleResponse.getMissingFiles().get(0));
        assertEquals(200, uploadFileResponse.getStatusCode());

        CreateBundleResponse createBundleResponse1 =
                DeepCodeRestApi.checkBundle(loggedToken, createBundleResponse.getBundleHash());
        assertNotNull(createBundleResponse1);
        System.out.printf(
                "\nCheck Bundle call return:\nStatus code [%1$d] %3$s \n bundleId: %2$s\n missingFiles: %4$s\n",
                createBundleResponse1.getStatusCode(),
                createBundleResponse1.getBundleHash(),
                createBundleResponse1.getStatusDescription(),
                createBundleResponse1.getMissingFiles());
        assertEquals(200, createBundleResponse1.getStatusCode());
        assertTrue(
                "List of missingFiles is NOT empty.", createBundleResponse1.getMissingFiles().isEmpty());
        assertEquals(
                "Checked and returned bundleId's are different.",
                createBundleResponse.getBundleHash(),
                checkBundleResponse.getBundleHash());
    }

    private FileHashRequest createFileHashRequest() {
        DeepCodeRestApi.setBaseUrl(baseUrl);
        final File testFile =
                new File(Objects.requireNonNull(
                        getClass().getClassLoader().getResource("AnnotatorTest.java")).getFile());
        String absolutePath = testFile.getAbsolutePath();
        String deepCodedPath =
                (absolutePath.startsWith("/") ? "" : "/")
                        + absolutePath;
        System.out.printf("\nFile: %1$s\n", deepCodedPath);
        System.out.println("-----------------");

        // Append with System.currentTimeMillis() to make new Hash.
        try (FileOutputStream fos = new FileOutputStream(absolutePath, true)) {
            fos.write(String.valueOf(System.currentTimeMillis()).getBytes());
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }

        String fileText;
        try {
            fileText = Files.readString(Paths.get(absolutePath));

            System.out.println(fileText);
            System.out.println("-----------------");

            return new FileHashRequest(Collections.singletonMap(deepCodedPath, hash(fileText)));
        } catch (IOException | NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }

    private static String hash(String fileText) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] encodedhash = digest.digest(fileText.getBytes(StandardCharsets.UTF_8));
        String hash = bytesToHex(encodedhash);
        System.out.printf("File hash: %1$s\n", hash);
        return hash;
    }

    private static String bytesToHex(byte[] hash) {
        StringBuilder hexString = new StringBuilder();
        for (byte b : hash) {
            String hex = Integer.toHexString(0xff & b);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }

    @Test
    public void _037_ExtendBundle() throws NoSuchAlgorithmException {
        // given
        System.out.println("\n--------------Extend Bundle----------------\n");
        FileHashRequest fileHashRequest = createFileHashRequest();
        CreateBundleResponse createBundleResponse = createBundleFromFileHashRequest(fileHashRequest);

        assertEquals(200, createBundleResponse.getStatusCode());
        assertFalse("List of missingFiles is empty.", createBundleResponse.getMissingFiles().isEmpty());

        String filePath = "test2.js";
        Map<String, FileHash2ContentRequest> files = new HashMap<>();
        files.put(filePath, new FileHash2ContentRequest(hash("test"), "test"));

        // when
        CreateBundleResponse extendBundleResponse =
                DeepCodeRestApi.extendBundle(
                        loggedToken,
                        createBundleResponse.getBundleHash(),
                        new ExtendBundleWithContentRequest(files, Collections.emptyList()));

        // then
        assertNotNull(extendBundleResponse);
        System.out.printf(
                "Extend Bundle call return:\nStatus code [%1$d] %3$s \n bundleId: %2$s\n missingFiles: %4$s\n",
                extendBundleResponse.getStatusCode(),
                extendBundleResponse.getBundleHash(),
                extendBundleResponse.getStatusDescription(),
                extendBundleResponse.getMissingFiles());
        assertEquals(200, extendBundleResponse.getStatusCode());
        assertFalse("List of missingFiles is empty.", extendBundleResponse.getMissingFiles().isEmpty());
    }

    @Test
    public void _040_UploadFiles() {
        System.out.println("\n--------------Upload Files by Hash----------------\n");
        FileHashRequest files = createFileHashRequest();
        @NotNull CreateBundleResponse createBundleResponse = createBundleFromFileHashRequest(files);
        Map<String, FileHash2ContentRequest> map = new HashMap<>();
        Optional<Map.Entry<String, String>> entryOptional = files.getFiles().entrySet().stream().findFirst();
        assertTrue(entryOptional.isPresent());
        Map.Entry<String, String> entry = entryOptional.get();
        map.put(entry.getKey(), new FileHash2ContentRequest(entry.getValue(), testFileContent));

        IExtendBundleRequest req = new ExtendBundleWithContentRequest(map, Collections.emptyList());

        EmptyResponse response = DeepCodeRestApi.extendBundle(loggedToken, createBundleResponse.getBundleHash(), req);

        assertNotNull(response);
        System.out.printf(
                "\nExtend Bundle call for %3$s \nStatus code [%1$d] %2$s\n",
                response.getStatusCode(),
                response.getStatusDescription(),
                createBundleResponse.getMissingFiles().get(0));
        assertEquals(200, response.getStatusCode());
    }

    @Test
    public void _090_getAnalysis() {
        String bundleHash = createBundleFromSource().getBundleHash();
        System.out.println("\n--------------Get Analysis----------------\n");
        assertNotNull(
                "`bundleHash` should be initialized", bundleHash);
        @NotNull CreateBundleResponse response = DeepCodeRestApi.checkBundle(loggedToken, bundleHash);
        assertEquals(200, response.getStatusCode());
        assertEquals(0, response.getMissingFiles().size());
        assertAndPrintGetAnalysisResponse(
                DeepCodeRestApi.getAnalysis(loggedToken, bundleHash, null));
        System.out.println("\n---- With `Linters` param:\n");
        assertAndPrintGetAnalysisResponse(
                DeepCodeRestApi.getAnalysis(loggedToken, bundleHash, null));
        System.out.println("\n---- With `severity=2` param:\n");
        assertAndPrintGetAnalysisResponse(
                DeepCodeRestApi.getAnalysis(loggedToken, bundleHash, 2));
    }

    private void assertAndPrintGetAnalysisResponse(GetAnalysisResponse response) {
        assertNotNull(response);
        System.out.printf(
                "Get Analysis call for test file: \n-----------\n %1$s \n-----------\nreturns Status code: %2$s \n%3$s\n",
                testFileContent, response.getStatusCode(), response);
        assertEquals("Get Analysis request not succeed", 200, response.getStatusCode());
    }
}
